@page "/todos"
@attribute [Authorize]
@inject HttpClient Client
@inject INotificationService NotificationService
@inject NavigationManager NavigationManager

<style>
    .task-text-field-class {
        width: 300px;
    }
</style>

<h1>Todo Web App</h1>
<AlertDialog @ref="dialog" />
<CreateForm @ref="createForm" />
<ViewForm @ref="viewForm" />

<Loading IsLoading="isLoading" />
<ErrorList @ref="errorList" />

<br/>
<div class="row">
    <div class="col-md-6">
        <MatButton Raised="true" Icon="playlist_add" OnClick="@(e => NewTask())">New Task</MatButton>
    </div>
</div>
<br/>
<Filter FilterAsync="GetTasksAsync" IsLoading="isLoading" ViewModel="filterViewModel" />
<br />

@if(!isLoading)
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Due Date</th>
                <th>Action</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in todoList)
            {
                var titleColor = item.DuplicateTitle ? "color:red" : "";
                var dueDateColor = item.DueDateState switch
                {
                    DueDateState.Soon => "color:green",
                    DueDateState.Today => "color:orange",
                    DueDateState.Late => "color:red",
                    _ => "",
                };
                var changeStateColor = item.IsCompleted ? "color:red" : "color:green";
                <tr>
                    <td style="@titleColor">@item.Title</td>
                    <td style="@dueDateColor">@item.DueDateString</td>
                    @if (item.StateIsChanging)
                    {
                        <td>
                            <MatButton Disabled="true" Style="@changeStateColor" Outlined="true">
                                <span class="spinner-grow spinner-grow-sm"></span>&nbsp;&nbsp;Waiting...
                            </MatButton>
                        </td>
                    }
                    else
                    {
                        @if (item.IsCompleted)
                        {
                            <td><MatButton Disabled="item.Disabled" Icon="close" Style="@changeStateColor" Outlined="true" @onclick="@(e => UncompleteTask(item))">@item.State</MatButton></td>
                        }
                        else
                        {
                            <td><MatButton Disabled="item.Disabled" Icon="done" Style="@changeStateColor" Outlined="true" @onclick="@(e => CompleteTask(item))">@item.State</MatButton></td>
                        }
                    }
                    <td><MatButton Icon="edit" Outlined="true" @onclick="@(e => EditTask(item.Id))">Edit</MatButton></td>
                    @if (item.Deleting)
                    {
                        <td>
                            <MatButton Disabled="true" Outlined="true">
                                <span class="spinner-grow spinner-grow-sm"></span>&nbsp;&nbsp;Deleting...
                            </MatButton>
                        </td>
                    }
                    else
                    {
                        <td><MatButton Disabled="item.Disabled" Icon="delete" Outlined="true" @onclick="@(e => DeleteTask(item))">Delete</MatButton></td>
                    }
                </tr>
            }
        </tbody>
    </table>

    @if(totalResults == 0)
    {
        <div class="alert alert-secondary" role="alert">
          No results exists!
        </div>
    }
}
<div>
    <MatPaginator Length="@totalResults" PageSize="@filterViewModel.Size" Page="NavigateAsync" />
</div>

@code {
    int totalResults;
    FilterQueryViewModel filterViewModel = new();
    private List<TableItemViewModel> todoList = new List<TableItemViewModel>();

    bool isLoading;

    AlertDialog? dialog;
    CreateForm? createForm;
    ViewForm? viewForm;
    ErrorList? errorList;

    protected override Task OnInitializedAsync()
    {
        SubscribeToNotifications();
        filterViewModel = new FilterQueryViewModel(NavigationManager);
        return GetTasksAsync();
    }

    void SubscribeToNotifications()
    {
        NotificationService.TaskCreated += TaskCreatedHandler;
        NotificationService.TaskUpdated += TaskUpdatedHandler;
        NotificationService.TaskDeleted += TaskDeletedHandler;
    }

    Task NavigateAsync(MatPaginatorPageEvent e)
    {
        filterViewModel.Page = e.PageIndex + 1;
        filterViewModel.Size = e.PageSize;
        return GetTasksAsync();
    }

    async Task GetTasksAsync()
    {
        try
        {
            var query = filterViewModel.GetFilterModelAsQueryString();
            isLoading = true;
            StateHasChanged();
            var response = await Client.GetAsync<FilterResult>($"api/todo-tasks{query}");

            if (!response.IsSuccess)
            {
                dialog?.ShowError(response);
                return;
            }

            var result = response.GetResult();
            totalResults = result.Total;
            todoList = result.Tasks
                .Select(t => new TableItemViewModel(t))
                .ToList();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    void NewTask()
    {
        createForm?.Open();
    }

    void TaskCreatedHandler(object? sender, TodoTaskOutput output)
    {
        todoList.Add(new TableItemViewModel(output));
        StateHasChanged();
    }

    void TaskUpdatedHandler(object? sender, TodoTaskOutput output)
    {
        var item = todoList.Find(i => i.Id == output.Id);
        item?.Update(output);
        if (item?.IsCompleted == true && filterViewModel.State == CompletionState.PendingTasks)
            todoList.Remove(item);
        StateHasChanged();
    }

    void TaskDeletedHandler(object? sender, TodoTaskOutput output)
    {
        todoList.RemoveAll(i => i.Id == output.Id);
        StateHasChanged();
    }

    void DeleteItem(string? id)
    {
        var myTodo = todoList.First(x => x.Id == id);
        todoList.Remove(myTodo);
    }

    void CompleteTask(TableItemViewModel item)
    {
        ChangeStateAsync(item, "complete", "Complete").GetAwaiter();
    }

    void UncompleteTask(TableItemViewModel item)
    {
        ChangeStateAsync(item, "uncomplete", "Uncomplete").GetAwaiter();
    }

    async Task ChangeStateAsync(TableItemViewModel item, string endpoint, string type)
    {
        try
        {
            item.IsChanging();
            var response = await Client.PatchAsync<InputResponse>($"api/todo-tasks/{item.Id}/{endpoint}");
            if (!response.IsSuccess)
            {
                NotificationService.AddErrorToast(response.GetProblem());
                return;
            }

            NotificationService.AddToast(response.GetResult().Id, type);
        }
        finally
        {
            StateHasChanged();
        }
    }

    async void DeleteTask(TableItemViewModel item)
    {
        try
        {
            item.IsDeleting();
            var response = await Client.DeleteAsync<InputResponse>($"api/todo-tasks/{item.Id}");
            if (!response.IsSuccess)
            {
                errorList?.ShowErrors(response.GetProblem());
                return;
            }

            NotificationService.AddToast(response.GetResult().Id, "Delete");
        }
        finally
        {
            StateHasChanged();
        }
    }

    void EditTask(string? id)
    {
        viewForm?.Open(id);
    }
}