@using Blazored.FluentValidation;
@inject INotificationService NotificationService
@inject HttpClient Client

<MatDialog @bind-IsOpen="@isOpen">
    <MatDialogTitle>Create new task</MatDialogTitle>
    <EditForm Model="@viewModel" OnValidSubmit="@SubmitFormAsync">
        <FluentValidationValidator @ref="validator" />
        <MatDialogContent>
            <ErrorList @ref="errorList" />
            <Loading IsLoading="isLoading" />
            <br />
            <div class="row">
                <div class="col-md-6">
                    <MatTextField @bind-Value="@viewModel.Title" Outlined="true" Label="Title"></MatTextField>
                    <ValidationMessage For="@(() => viewModel.Title)"/>
                </div>
                <div class="col-md-6">
                    <MatDatePicker Outlined="true" Format="yyyy-MM-dd" Label="Due Date" @bind-Value="@viewModel.DueDate"></MatDatePicker>
                    <ValidationMessage For="@(() => viewModel.DueDate)"/>
                </div>
            </div>
            <br/>
            <div class="row">
                <div class="col-md-6">
                    <MatStringField InputClass="task-text-field-class" TextArea="true" Outlined="true" @bind-Value="@viewModel.Note" Label="Note"></MatStringField>
                    <ValidationMessage For="@(() => viewModel.Note)"/>
                </div>
            </div>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Type="button" OnClick="@(e => Close())">No Thanks</MatButton>
            <MatButton Disabled="isLoading" Type="submit">Submit</MatButton>
        </MatDialogActions>
    </EditForm>
</MatDialog>
 
@code
{
    bool isOpen;
    bool isLoading;
    CreateViewModel viewModel = new();
    ErrorList? errorList;
    CancellationTokenSource cancellationTokenSource = new();
    FluentValidationValidator? validator;

    protected override void OnInitialized() => NewViewModel();

    void NewViewModel()
    {
        viewModel = new();
        viewModel.TitleChanged += (s, title) => TitleIsDuplicateAsync(title).GetAwaiter();
    }

    async Task<bool> TitleIsDuplicateAsync(string? title)
    {
        if (string.IsNullOrWhiteSpace(title)) return false;

        try
        {
            CancelOngoingCalls();
            var response = await Client.GetAsync<SimilarTitleOutput>(
                $"api/todo-tasks/similar-title-exists?title={title}",
                cancellationTokenSource.Token
            );

            if (!response.IsSuccess)
            {
                errorList?.ShowErrors(response.GetProblem());
                return false;
            }

            var output = response.GetResult();
            ShowErrorIfTitleIsDuplicate(output);
            return output.Exists;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            return false;
        }
    }

    void CancelOngoingCalls()
    {
        cancellationTokenSource.Cancel();
        cancellationTokenSource = new();
    }

    void ShowErrorIfTitleIsDuplicate(SimilarTitleOutput output)
    {
        viewModel.DuplicateTitle = output.Exists;
        validator?.Validate(o => o.IncludeRuleSets());
        StateHasChanged();
    }

    async Task SubmitFormAsync()
    {
        try
        {
            isLoading = true;
            if (await TitleIsDuplicateAsync(viewModel.Title)) return;

            var input = viewModel.ToInput();
            var response = await Client.PostAsync<CreateTaskInput, InputResponse>("api/todo-tasks", input);
            if (!response.IsSuccess)
            {
                errorList?.ShowErrors(response.GetProblem());
                return;
            }

            NotificationService.AddToast(response.GetResult().Id, "Create");
            ClearAndClose();
        }
        finally
        {
            isLoading = false;
        }
    }

    public void ClearAndClose()
    {
        NewViewModel();
        Close();
    }

    public void Open()
    {
        isOpen = true;
        errorList?.Clear();
        StateHasChanged();
    }

    public void Close()
    {
        isOpen = false;
        errorList?.Clear();
        StateHasChanged();
    }
}
 