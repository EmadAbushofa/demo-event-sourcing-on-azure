@page "/todos"
@attribute [Authorize]
@inject IMatToaster Toaster
@inject HttpClient Client

<style>
    .task-text-field-class {
        width: 300px;
    }
</style>

<h1>Todo Web App</h1>

@if (todoList.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Due Date</th>
                <th>Status</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in todoList)
            {
            <tr>
                <td style="color:@(item.DuplicateTitle ? "red" : "")">@item.Title</td>
                <td>@item.DueDate</td>
                <td><MatButton Icon="done" Outlined="true" @onclick="@(e => CompleteItem(item.Id))">Complete</MatButton></td>
                <td><MatButton Icon="edit" Outlined="true" @onclick="@(e => EditItem(item.Id))">Edit</MatButton></td>
                <td><MatButton Icon="delete" Outlined="true" @onclick="@(e => DeleteItem(item.Id))">Delete</MatButton></td>
            </tr>
            }
        </tbody>
    </table>
}
else{
    <div class="alert alert-secondary" role="alert">
      You have no opened tasks!
    </div>
}

@code {
    private List<TableItemViewModel> todoList = new List<TableItemViewModel>();

    protected override async Task OnInitializedAsync()
    {
        var results = await Client.GetJsonAsync<FilterResult>("api/todo-tasks");

        todoList = results.Tasks
            .Select(t => new TableItemViewModel(t))
            .ToList();
    }

    async Task SubmitFormAsync()
    {
        await Task.CompletedTask;

        //if (_viewModel.Id == null)
        //{
        //    var myTodoItem = new TodoListItem()
        //    {
        //        Id = Guid.NewGuid().ToString(),
        //        DueDate = dueDate == null ? DateTime.Now.AddDays(1) : (dueDate.Value),
        //        Title = title,
        //        IsCompleted = false
        //    };
        //    todoList.Add(myTodoItem);
        //    _viewModel = new();
        //    Toaster.Add("New todo added.", MatToastType.Info, "Todo List", null);
        //}
        //else
        //{
        //    var myTodo = todoList.FirstOrDefault(x => x.Id == _viewModel.Id);
        //    myTodo.Title = title;
        //    myTodo.DueDate = dueDate == null ? DateTime.Now.AddDays(1) : (dueDate.Value);
        //    _viewModel = new();
        //    Toaster.Add("Todo edit finished.", MatToastType.Info, "Todo List", null);
        //}

    }

    void DeleteItem(string? id)
    {
        var myTodo = todoList.First(x => x.Id == id);
        todoList.Remove(myTodo);
        Toaster.Add("Todo removed.", MatToastType.Info, "Todo List", null);
    }

    void CompleteItem(string? id)
    {
        var myTodo = todoList.First(x => x.Id == id);
        myTodo.IsCompleted = !myTodo.IsCompleted;
        Toaster.Add("Todo status changed.", MatToastType.Info, "Todo List", null);
    }

    void EditItem(string? id)
    {
        var myTodo = todoList.FirstOrDefault(x => x.Id == id);
    }
}